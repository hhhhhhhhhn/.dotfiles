if has('win32') || has ('win64')
  let $VIMHOME = $HOME . "/vimfiles"
else
  let $VIMHOME = $HOME . "/.vim"
endif

""" Plugin section
set nocompatible
filetype off
let &rtp .= "," . $VIMHOME . "/bundle/Vundle.vim"

call vundle#begin()

Plugin 'ap/vim-css-color'
Plugin 'dense-analysis/ale'
Plugin 'lifepillar/vim-solarized8'
Plugin 'vimwiki/vimwiki'

call vundle#end()

""" Plugin related section

syntax enable
set background=dark
if(!empty($DVTM))
  set t_Co=16
  let g:solarized_use16=1
  let g:solarized_termtrans=1
else
  set termguicolors
endif
colorscheme solarized8

let g:ale_completion_enabled=1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport=1
" set completeopt=menuone,menu,longest

""" Vanilla section
let mapleader=" "

filetype plugin on
filetype indent on

set autoindent
set smartindent
set nobackup
set ffs=unix
set ff=unix
set mouse=a
set nohlsearch

let mapleader=" "
set tabstop=4 shiftwidth=4 colorcolumn=81,121

function! CharAtCursor()
  return strcharpart(strpart(getline('.'), col('.') - 1), 0, 1)
endfunction

"nnoremap <esc> :noh<return><esc> (breaks)
set backspace=indent,eol,start

inoremap <expr> <down> ""
inoremap <expr> <up> ""
inoremap <expr> <left> ""
inoremap <expr> <right> ""
nnoremap <expr> <down> ""
nnoremap <expr> <up> ""
nnoremap <expr> <left> ""
nnoremap <expr> <right> ""

nnoremap <leader><leader> /++<CR>:noh<CR>c2l
nnoremap <leader>n :bn!<CR>
nnoremap <leader>N :bp!<CR>
nnoremap <leader>D :bd<CR>
nnoremap <leader>s :sh<CR>
" follow tag
nnoremap <leader>f <C-]>
nnoremap <leader>F <C-T>

" nnoremap <leader>a :!auto<space>%<CR> " breaks too
inoremap jj <esc>
inoremap ;lt <
inoremap ;gt >

" visual select stuff
function! VisualNormalRecord()
	normal 0
	let g:selStart = getpos("'<")[1] + 1 " first line is not used
	let g:selEnd = getpos("'>")[1]
	normal q00
endfunction

function! VisualNormalRun()
	normal 0q
	let @0 = @0[:-2] . ""
	call feedkeys(g:selStart . "ggV" . g:selEnd . "gg:normal @0\<CR>")
endfunction

vnoremap <leader>m :<C-U>call VisualNormalRecord()<CR>
nnoremap <leader>m :<C-U>call VisualNormalRun()<CR>

"" Smart tab
function! Tab()
	let line = getline(".")
	let charsUntilCursor = strpart(line, -1, col(".")+1)

	let nonSpaces = matchstr(charsUntilCursor, "[^ \t]")

	if (strlen(nonSpaces)==0)
		return "\<tab>"
	endif
	return "\<C-N>"
endfunction

inoremap <expr> <tab> Tab()
