if has('win32') || has ('win64')
  let $VIMHOME = $HOME . "/vimfiles"
else
  let $VIMHOME = $HOME . "/.vim"
endif

""" Plugin section
set nocompatible
filetype off

call plug#begin($VIMHOME . "/plugged")

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'lifepillar/vim-solarized8'
Plug 'preservim/nerdtree'
Plug 'vim-scripts/Drawit'
Plug 'evanleck/vim-svelte', {'branch': 'main'}

call plug#end()

""" Plugin related section
syntax enable
set background=dark
if(!empty($DVTM))
  set t_Co=16
  let g:solarized_use16=1
  let g:solarized_termtrans=1
else
  set termguicolors
endif
colorscheme solarized8

let g:ale_completion_enabled=1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport=1

let g:svelte_preprocessors = ["ts"]

""" Vanilla section
let mapleader=" "

filetype plugin on
filetype indent on

set ignorecase
set noswapfile
set autoindent
set smartindent
set nobackup
set ffs=unix
set ff=unix
set mouse=a
set nohlsearch
set nowrap

let mapleader=" "
set tabstop=4 shiftwidth=4 colorcolumn=81,121

function! CharAtCursor()
  return strcharpart(strpart(getline('.'), col('.') - 1), 0, 1)
endfunction

set backspace=indent,eol,start

nnoremap <leader><leader> /++<CR>:noh<CR>c2l
nnoremap <leader>n :bn!<CR>
nnoremap <leader>N :bp!<CR>
nnoremap <leader>D :bd<CR>
nnoremap <leader>s :sh<CR>

inoremap jj <esc>
inoremap ;lt <
inoremap ;gt >

""" Notes
nnoremap <leader>w :edit ~/Notes/index.md<CR>
autocmd BufRead,BufCreate ~/Notes/* so $VIMHOME/ftplugin/notes.vim
"""

" visual select stuff
function! VisualNormalRecord()
	normal 0
	let g:selStart = getpos("'<")[1] + 1 " first line is not used
	let g:selEnd = getpos("'>")[1]
	normal q00
endfunction

function! VisualNormalRun()
	normal 0q
	let @0 = @0[:-2] . ""
	call feedkeys(g:selStart . "ggV" . g:selEnd . "gg:normal @0\<CR>")
endfunction

vnoremap <leader>m :<C-U>call VisualNormalRecord()<CR>
nnoremap <leader>m :<C-U>call VisualNormalRun()<CR>

""""" NERDTree """"""
nnoremap <leader>e :NERDTreeToggle<cr>
nnoremap <leader>s :NERDTreeFind<cr>


""""" COC """"""
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<Tab>"

nmap <leader>r :CocRestart<CR><CR>
nmap <leader>R <Plug>(coc-rename)
nmap <leader>f <Plug>(coc-definition)
nmap <leader>F <C-O>

xmap <leader>p <Plug>(coc-format-selected)
nmap <leader>p <Plug>(coc-format-selected)

nnoremap <silent> K :call <SID>show_documentation()<CR>

function s:show_documentation()
	if (index(["vim", "help"], &filetype) >= 0)
		execute "h ".expand("<cword>")
	elseif (coc#rpc#ready())
		call CocActionAsync("doHover")
	else
		execute "!" . &keywordprg . " " . expand("<cword>")
	endif
endfunction
